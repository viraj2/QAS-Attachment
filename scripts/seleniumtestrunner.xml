<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- 
 QMetry Automation Framework provides a powerful and versatile platform to author 
Automated Test Cases in Behavior Driven, Keyword Driven or Code Driven approach
               
Copyright 2016 Infostretch Corporation

This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT
OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE

You should have received a copy of the GNU General Public License along with this program in the name of LICENSE.txt in the root folder of the distribution. If not, see https://opensource.org/licenses/gpl-3.0.html

See the NOTICE.TXT file in root folder of this source files distribution 
for additional information regarding copyright ownership and licenses
of other open source software / files used by QMetry Automation Framework.

For any inquiry or need additional information, please contact support-qaf@infostretch.com

-->
 
<project basedir=".." default="runtests" name="TestAutomation" xmlns:ivy="antlib:org.apache.ivy.ant" xmlns:ac="antlib:net.sf.antcontrib">
	<property name="bin.dir" value="${basedir}/bin" />
	<property name="lib.dir" value="${basedir}/lib" />
	<property name="dist.dir" value="${basedir}/dist" />
	<property name="src.dir" value="${basedir}/src" />
	<property name="server.dir" value="${basedir}/server" />
	<!--<property name="qmetry.schedule.file" value="" /> -->
	<property file="scripts/seleniumtestrunner.properties" />
	<property environment="env" />
	<property name="debuglevel" value="source,lines,vars" />
	<property name="target" value="1.7" />
	<property name="source" value="1.7" />

	<property name="rerun.failed.test" value="1" />
	<!-- <property name="rerun.failed.test" value="1,2" /> -->
	<property name="rerun.invocation.sufix" value="" />

	<tstamp>
		<format property="run.time" pattern="dd_MMM_yyyy_hh_mm_aa" />
	</tstamp>
	<!-- this build file is a self contained project: it doesn't require anything 
		else that ant 1.6.2 or greater and java 1.4 or greater properly installed. 
		It is used to showcase how easy and straightforward it can be to use Ivy. 
		This is not an example of the best pratice to use in a project, especially 
		for the java source code "generation" :-) (see generate-src target) To run 
		copy this file in an empty directory, open a shell or a command window in 
		this directory and run "ant". It will download ivy and then use it to resolve 
		the dependency of the class which is itself "contained" in this build script. 
		After a successful build run "ant" again and you will see the build will 
		be much faster. More information can be found at http://ant.apache.org/ivy/ -->
	<!-- here is the version of ivy we will use. change this property to try 
		a newer version if you want -->

	<property name="ivy.install.version" value="2.3.0" />
	<property name="ivy.jar.dir" value="${ant.library.dir}" />
	<property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />
	<property name="build.dir" value="build" />
	<property name="src.dir" value="src" />
	<property name="buildid" value="${run.time}" />

	<property name="result.dir" value="${test.results.dir}/${buildid}" />

	<target name="download-ivy" unless="skip.download">
		<mkdir dir="${ivy.jar.dir}" />
		<!-- download Ivy from web site so that it can be used even without any 
			special installation -->
		<echo message="installing ivy..." />
		<get src="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" dest="${ivy.jar.file}" usetimestamp="true" />
	</target>
	<!-- ================================= target: install-ivy this target is 
		not necessary if you put ivy.jar in your ant lib directory if you already 
		have ivy in your ant lib, you can simply remove this target and the dependency 
		the 'go' target has on it ================================= -->
	<target name="install-ivy" depends="download-ivy" description="--> install ivy">
		<!-- try to load ivy here from local ivy dir, in case the user has not 
			already dropped it into ant's lib dir (note that the latter copy will always 
			take precedence). We will not fail as long as local lib dir exists (it may 
			be empty) and ivy is in at least one of ant's lib dir or the local lib dir. -->
		<path id="ivy.lib.path">
			<fileset dir="${ivy.jar.dir}" includes="*.jar" />
		</path>
		<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path" />
	</target>

	<path id="build.classpath">
		<fileset dir="${lib.dir}">
			<include name="*.jar" />
			<include name="**/*.jar" />
		</fileset>
	</path>



	<!-- ================================= target: resolve ================================= -->
	<target name="resolve" description="--> retrieve dependencies with ivy" depends="install-ivy">
		<echo message="${ivy.default.settings.dir}">
		</echo>
		<ivy:resolve />
		<ivy:cachepath pathid="lib.path.id" />

		<ivy:addpath topath="build.classpath">
			<path refid="lib.path.id" />
		</ivy:addpath>
		<taskdef resource="net/sf/antcontrib/antcontrib.properties" classpathref="build.classpath">
		</taskdef>
		<!-- <taskdef resource="net/sf/antcontrib/antlib.xml" /> -->

	</target>

	<target name="init" depends="resolve">
		<mkdir dir="bin" />
		<mkdir dir="dist" />
		<copy includeemptydirs="false" todir="${bin.dir}">
			<fileset dir="${src.dir}">
				<exclude name="**/*.ucls" />
				<exclude name="**/*.java" />
			</fileset>
		</copy>
	</target>


	<target name="clean">
		<delete dir="bin" />
		<delete file="${dist.dir}/selenium-test.jar" failonerror="false">
		</delete>
	</target>

	<target name="bindelete">
		<delete dir="bin" failonerror="true" />
	</target>


	<target depends="build-project" name="build" />
	<target depends="init" name="build-project">

		<taskdef classpathref="build.classpath" resource="org/aspectj/tools/ant/taskdefs/aspectjTaskdefs.properties" />
		<echo message="${ant.project.name}: ${ant.file}" />

		<echo level="info">--- compile (start) ---</echo>



		<!-- <javac debug="false" destdir="${bin.dir}" source="${source}" target="${target}"> 
			<src path="${src.dir}" /> <classpath refid="build.classpath" /> </javac> -->
		<iajc source="${source}" target="${target}" showweaveinfo="true" verbose="true" destdir="${bin.dir}" aspectpathref="build.classpath">
			<inpath>
				<pathelement location="${src.dir}" />
				<fileset dir="${lib.dir}" includes="**/pm-selenium*.jar" />
			</inpath>
			<sourceroots>
				<pathelement location="${src.dir}" />
			</sourceroots>
			<classpath refid="build.classpath">
			</classpath>
		</iajc>
		<echo level="info">--- compile (finished) ---</echo>

	</target>
	<!-- ================================= target: make-jar ================================= -->
	<target name="make-jar" depends="build-project" description="Jar test classes">
		<jar destfile="${dist.dir}/selenium-test.jar" basedir="${bin.dir}" excludes="**/META-INF/**" />
	</target>
	<target name="gendoc">
		<javadoc packagenames="com.*" sourcepath="${src.dir}" classpathref="build.classpath" destdir="docs/tests" verbose="true" author="true" version="true" use="true" windowtitle="Test Automation API">
			<doctitle>
				<![CDATA[<h1>Test Automation API</h1>]]></doctitle>
		<bottom>
			<![CDATA[<i>Copyright &#169; 2000 Infostretch Corp. All Rights Reserved.</i>]]></bottom>

</javadoc>
</target>

<target name="generate-step-list" depends="make-jar">
<java classname="com.qmetry.qaf.automation.step.JavaStepFinder" classpathref="build.classpath">
</java>
</target>

<target name="generate-step-xml" depends="make-jar">
<java classname="com.qmetry.qaf.automation.step.client.TestStepExporter" classpathref="build.classpath">
</java>


</target>

<target name="runtests" depends="make-jar">
<!-- ===============execution classpath order is important============== -->
<path id="execution.classpath">
	<fileset dir="${dist.dir}">
		<include name="*.jar" />
		<include name="**/*.jar" />
	</fileset>
	<path refid="build.classpath" />
</path>
<echo>${execution.classpath}</echo>
<taskdef resource="testngtasks" classpathref="execution.classpath" />
<testng classpathref="execution.classpath" outputDir="${test.results.dir}/${run.time}" useDefaultListeners="true" listeners="org.testng.reporters.XMLReporter" methodselectors="com.qmetry.qaf.automation.testng.pro.QAFMethodSelector:1">
	<xmlfileset dir="${test.conf.dir}" includes="${testng.suite.file}" />
	<jvmarg value="-ea" />
	<sysproperty key="org.uncommons.reportng.title" value="${testng.report.title}" />
	<sysproperty key="org.uncommons.reportng.escape-output" value="false" />
	<sysproperty key="outputDir" value="${test.results.dir}/${run.time}" />
	<sysproperty key="test.results.dir" value="${test.results.dir}/${run.time}/html" />
	<sysproperty key="json.report.dir" value="${test.results.dir}/${run.time}/json" />
	<sysproperty key="json.report.root.dir" value="${test.results.dir}" />
	<sysproperty key="selenium.screenshots.dir" value="${test.results.dir}/${run.time}/img" />
	<sysproperty key="selenium.screenshots.relative.path" value="../img" />
	<sysproperty key="log4j.configuration" value="file:///${basedir}/log4j.properties" />
	<propertyset>
		<propertyref builtin="commandline" />
	</propertyset>
</testng>
</target>

<target name="run-tests-failed" depends="make-jar">
<!-- ant-contrib-[version].jar required in classpath -->
<var name="output.dir" value="${result.dir}" />
<property name="output.dir" value="${result.dir}" />
<echo>output dir set to ${output.dir}</echo>
<path id="execution.classpath">
	<path refid="build.classpath" />
	<fileset dir="${dist.dir}">
		<include name="*.jar" />
		<include name="**/*.jar" />
	</fileset>
</path>
<taskdef resource="testngtasks" classpathref="execution.classpath" />
<testng classpathref="execution.classpath" outputDir="${output.dir}" useDefaultListeners="true" listeners="org.testng.reporters.XMLReporter" methodselectors="com.qmetry.qaf.automation.testng.pro.QAFMethodSelector:1">
	<xmlfileset dir="${test.conf.dir}" includes="${testng.suite.file}" />
	<xmlfileset file="${testng.suite.file}" erroronmissingdir="false" />
	<jvmarg value="-ea" />
	<sysproperty key="org.uncommons.reportng.title" value="${testng.report.title}" />
	<sysproperty key="org.uncommons.reportng.xml-dialect" value="testng" />
	<sysproperty key="org.uncommons.reportng.escape-output" value="false" />
	<sysproperty key="outputDir" value="${output.dir}" />
	<sysproperty key="test.results.dir" value="${output.dir}/html" />
	<sysproperty key="json.report.root.dir" value="${test.results.dir}" />
	<sysproperty key="json.report.dir" value="${output.dir}/json" />
	<sysproperty key="selenium.screenshots.dir" value="${output.dir}/img" />
	<sysproperty key="selenium.screenshots.relative.path" value="../img" />
	<sysproperty key="log4j.configuration" value="file:///${basedir}/log4j.properties" />
	<propertyset>
		<propertyref builtin="commandline" />
	</propertyset>
</testng>

<if>
	<available file="${output.dir}/testng-failed-qas.xml" />
	<then>
		<delete file="${output.dir}/testng-failed.xml" failonerror="false" />
		<rename src="${output.dir}/testng-failed-qas.xml" dest="${output.dir}/testng-failed.xml" />
	</then>
</if>

<if>
	<not>
		<equals arg1="${caller.target}" arg2="run-tests-failed">
		</equals>
	</not>
	<then>
		<var name="caller.target" value="run-tests-failed" />
		<foreach list="${rerun.failed.test}" target="rerun" param="count" />
	</then>
</if>
</target>


<!-- - - - - - - - - - - - - - - - - - target: rerun - - - - - - - - - - 
		- - - - - - - -->
<target name="rerun">
<echo>${output.dir} ${count}</echo>
<echo>${output.dir}/testng-failed-qas.xml</echo>
<if>
	<available file="${output.dir}/testng-failed.xml" />
	<then>
		<!--<delete file="${output.dir}/testng-results.xml" failonerror="false">
		</delete>-->
		<var name="testng.suite.file" value="${output.dir}/testng-failed.xml" />
		<echo>rerun time#${count} with configration file
					${testng.suite.file}</echo>
		<antcall target="${caller.target}" />
	</then>
</if>
</target>

</project>
